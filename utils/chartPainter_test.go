package utils

import (
	"context"
	"github.com/chromedp/chromedp"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/golang/glog"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"testing"
)

//// generate random data for bar chart
//func generateBarItems() []opts.BarData {
//	items := make([]opts.BarData, 0)
//	for i := 0; i < 7; i++ {
//		items = append(items, opts.BarData{Value: rand.Intn(300)})
//	}
//	return items
//}
//
func httpserver(w http.ResponseWriter, _ *http.Request) {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	var (
		theX = []string{"X1", "X2", "X3", "X4", "X5"}
		theY = []float64{1.0, 1.3, 1.5, 1.1, 1.7}
	)

	// Put data into instance
	bar.SetXAxis(theX).
		AddSeries("Bar Data", ToBarData("Value", theY)).SetSeriesOptions(
		charts.WithMarkLineNameTypeItemOpts(
			opts.MarkLineNameTypeItem{Name: "Maximum", Type: "max"},
			//opts.MarkLineNameTypeItem{Name: "Avg", Type: "average"},
		),
	)

	line := charts.NewLine()
	line.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{Title: "basic line example", Subtitle: "This is the subtitle."}),
	)

	line.SetXAxis(theX).
		AddSeries("Line Data", ToLineData("Value", theY))

	bar.Overlap(line)
	//AddSeries("Category A", generateBarItems()).
	//AddSeries("Category B", generateBarItems())
	// Where the magic happens
	bar.Render(w)
}

func Test_ChartPainter(t *testing.T) {
	http.HandleFunc("/", httpserver)
	http.ListenAndServe(":8081", nil)

	//EnableGlogForTesting()
	//go func() {
	//	http.HandleFunc("/", httpserver)
	//	http.ListenAndServe(":8081", nil)
	//}()
	//TheScreenCapture.GenerateImage("newImage.png")
}

func Test_ChartPainter2(t *testing.T) {
	EnableGlogForTesting()
	//var (
	// body []byte
	//)
	glog.V(4).Info("START CAPTURE")
	//chromedp.Navigate("http://localhost:8081")
	////chromedp.Screenshot("EAXbIPnzxFhB", &body, chromedp.NodeVisible, chromedp.ByID)
	//chromedp.CaptureScreenshot(&body)
	//if err := ioutil.WriteFile("c:/FD/NewImage.png", body, 0644); err != nil {
	//	log.Fatal(err)
	//}
	// create context
	ctx, cancel := chromedp.NewContext(
		context.Background(),
		//chromedp.WithDebugf(log.Printf),
	)
	defer cancel()

	// capture screenshot of an element
	var buf []byte
	//if err := chromedp.Run(ctx, elementScreenshot(`https://pkg.go.dev/`,
	//
	//`img.Homepage-logo`, &buf)); err != nil {
	//	log.Fatal(err)
	//}
	//if err := ioutil.WriteFile("elementScreenshot.png", buf, 0o644); err != nil {
	//	log.Fatal(err)
	//}

	// capture entire browser viewport, returning png with quality=90
	if err := chromedp.Run(ctx, fullScreenshot(`file:///Users/carrick/go/src/github.com/skeyic/ark-robot/data/report/2021-04-23/top_10_stocks_2021-04-23ARKF.html`, 90, &buf)); err != nil {
		log.Fatal(err)
	}
	if err := ioutil.WriteFile("fullScreenshotChart.png", buf, 0x644); err != nil {
		log.Fatal(err)
	}
	log.Printf("wrote fullScreenshotChart.png")
}

func river_http(w http.ResponseWriter, _ *http.Request) {
	// create a new bar instance
	tr := charts.NewThemeRiver()
	tr.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title: "ThemeRiver-SingleAxis-Time",
		}),
		charts.WithSingleAxisOpts(opts.SingleAxis{
			Type:   "time",
			Bottom: "10%",
		}),
		charts.WithTooltipOpts(opts.Tooltip{
			Trigger: "axis",
		}),
	)

	data := []opts.ThemeRiverData{
		{"2015/11/08", 10, "DQ"},
		{"2015/11/09", 15, "DQ"},
		{"2015/11/10", 35, "DQ"},
		{"2015/11/11", 38, "DQ"},
		{"2015/11/12", 22, "DQ"},
		{"2015/11/13", 16, "DQ"},
		{"2015/11/14", 7, "DQ"},
		{"2015/11/15", 2, "DQ"},
		{"2015/11/16", 17, "DQ"},
		{"2015/11/17", 33, "DQ"},
		{"2015/11/18", 40, "DQ"},
		{"2015/11/19", 32, "DQ"},
		{"2015/11/20", 26, "DQ"},
		{"2015/11/21", 35, "DQ"},
		{"2015/11/22", 40, "DQ"},
		{"2015/11/23", 32, "DQ"},
		{"2015/11/24", 26, "DQ"},
		{"2015/11/25", 22, "DQ"},
		{"2015/11/26", 16, "DQ"},
		{"2015/11/27", 22, "DQ"},
		{"2015/11/28", 10, "DQ"},
		{"2015/11/08", 35, "TY"},
		{"2015/11/09", 36, "TY"},
		{"2015/11/10", 37, "TY"},
		{"2015/11/11", 22, "TY"},
		{"2015/11/12", 24, "TY"},
		{"2015/11/13", 26, "TY"},
		{"2015/11/14", 34, "TY"},
		{"2015/11/15", 21, "TY"},
		{"2015/11/16", 18, "TY"},
		{"2015/11/17", 45, "TY"},
		{"2015/11/18", 32, "TY"},
		{"2015/11/19", 35, "TY"},
		{"2015/11/20", 30, "TY"},
		{"2015/11/21", 28, "TY"},
		{"2015/11/22", 27, "TY"},
		{"2015/11/23", 26, "TY"},
		{"2015/11/24", 15, "TY"},
		{"2015/11/25", 30, "TY"},
		{"2015/11/26", 35, "TY"},
		{"2015/11/27", 42, "TY"},
		{"2015/11/28", 42, "TY"},
		{"2015/11/08", 21, "SS"},
		{"2015/11/09", 25, "SS"},
		{"2015/11/10", 27, "SS"},
		{"2015/11/11", 23, "SS"},
		{"2015/11/12", 24, "SS"},
		{"2015/11/13", 21, "SS"},
		{"2015/11/14", 35, "SS"},
		{"2015/11/15", 39, "SS"},
		{"2015/11/16", 40, "SS"},
		{"2015/11/17", 36, "SS"},
		{"2015/11/18", 33, "SS"},
		{"2015/11/19", 43, "SS"},
		{"2015/11/20", 40, "SS"},
		{"2015/11/21", 34, "SS"},
		{"2015/11/22", 28, "SS"},
		{"2015/11/23", 26, "SS"},
		{"2015/11/24", 37, "SS"},
		{"2015/11/25", 41, "SS"},
		{"2015/11/26", 46, "SS"},
		{"2015/11/27", 47, "SS"},
		{"2015/11/28", 41, "SS"},
		{"2015/11/08", 10, "QG"},
		{"2015/11/09", 15, "QG"},
		{"2015/11/10", 35, "QG"},
		{"2015/11/11", 38, "QG"},
		{"2015/11/12", 22, "QG"},
		{"2015/11/13", 16, "QG"},
		{"2015/11/14", 7, "QG"},
		{"2015/11/15", 2, "QG"},
		{"2015/11/16", 17, "QG"},
		{"2015/11/17", 33, "QG"},
		{"2015/11/18", 40, "QG"},
		{"2015/11/19", 32, "QG"},
		{"2015/11/20", 26, "QG"},
		{"2015/11/21", 35, "QG"},
		{"2015/11/22", 40, "QG"},
		{"2015/11/23", 32, "QG"},
		{"2015/11/24", 26, "QG"},
		{"2015/11/25", 22, "QG"},
		{"2015/11/26", 16, "QG"},
		{"2015/11/27", 22, "QG"},
		{"2015/11/28", 10, "QG"},
		{"2015/11/08", 10, "SY"},
		{"2015/11/09", 15, "SY"},
		{"2015/11/10", 35, "SY"},
		{"2015/11/11", 38, "SY"},
		{"2015/11/12", 22, "SY"},
		{"2015/11/13", 16, "SY"},
		{"2015/11/14", 7, "SY"},
		{"2015/11/15", 2, "SY"},
		{"2015/11/16", 17, "SY"},
		{"2015/11/17", 33, "SY"},
		{"2015/11/18", 40, "SY"},
		{"2015/11/19", 32, "SY"},
		{"2015/11/20", 26, "SY"},
		{"2015/11/21", 35, "SY"},
		{"2015/11/22", 4, "SY"},
		{"2015/11/23", 32, "SY"},
		{"2015/11/24", 26, "SY"},
		{"2015/11/25", 22, "SY"},
		{"2015/11/26", 16, "SY"},
		{"2015/11/27", 22, "SY"},
		{"2015/11/28", 10, "SY"},
		{"2015/11/08", 10, "DD"},
		{"2015/11/09", 15, "DD"},
		{"2015/11/10", 35, "DD"},
		{"2015/11/11", 38, "DD"},
		{"2015/11/12", 22, "DD"},
		{"2015/11/13", 16, "DD"},
		{"2015/11/14", 7, "DD"},
		{"2015/11/15", 2, "DD"},
		{"2015/11/16", 17, "DD"},
		{"2015/11/17", 33, "DD"},
		{"2015/11/18", 4, "DD"},
		{"2015/11/19", 32, "DD"},
		{"2015/11/20", 26, "DD"},
		{"2015/11/21", 35, "DD"},
		{"2015/11/22", 40, "DD"},
		{"2015/11/23", 32, "DD"},
		{"2015/11/24", 26, "DD"},
		{"2015/11/25", 22, "DD"},
		{"2015/11/26", 16, "DD"},
		{"2015/11/27", 22, "DD"},
		{"2015/11/28", 10, "DD"},
	}

	tr.AddSeries("themeRiver", data)
	tr.Render(w)
}

func Test_ChartPainterRiver(t *testing.T) {
	//http.HandleFunc("/", river_http)
	http.HandleFunc("/", pie_http)

	http.ListenAndServe(":8081", nil)

	//EnableGlogForTesting()
	//go func() {
	//	http.HandleFunc("/", httpserver)
	//	http.ListenAndServe(":8081", nil)
	//}()
	//TheScreenCapture.GenerateImage("newImage.png")
}

func line_http(w http.ResponseWriter, _ *http.Request) {
	line := charts.NewLine()
	line.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title:    "title and label options",
			Subtitle: "go-echarts is an awesome chart library written in Golang",
			Link:     "https://github.com/go-echarts/go-echarts",
		}),
	)

	var (
		theX     = []string{"X1", "X2", "X3", "X4", "X5"}
		theY     = []float64{1.0, 1.3, 1.5, 1.1, 1.7}
		theValue []opts.LineData
	)

	for _, y := range theY {
		theValue = append(theValue, opts.LineData{Value: y})
	}

	line.SetXAxis(theX).
		AddSeries("Category A", theValue).
		SetSeriesOptions(
			charts.WithLabelOpts(opts.Label{
				Show: true,
			}),
		)
	line.Render(w)
}

var (
	itemCntPie = 4
	seasons    = []string{"Spring", "Summer", "Autumn ", "Winter"}
)

func generatePieItems() []opts.PieData {
	items := make([]opts.PieData, 0)
	for i := 0; i < itemCntPie; i++ {
		items = append(items, opts.PieData{Name: seasons[i], Value: rand.Intn(100)})
	}
	return items
}

func pie_http(w http.ResponseWriter, _ *http.Request) {
	pie := charts.NewPie()
	pie.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{
			Title: "Rose(Radius)",
		}),
	)

	pie.AddSeries("pie", []opts.PieData{
		{
			Name:  "HUYA",
			Value: 1.0,
		},
		{
			Name:  "JD",
			Value: 1.1,
		},
		{
			Name:  "TSP",
			Value: 3.0,
		},
		{
			Name:  "BIDU",
			Value: 0.2,
		},
		{
			Name:  "TCEHY",
			Value: 1.3,
		},
	}).
		SetSeriesOptions(
			charts.WithLabelOpts(opts.Label{
				Show:      true,
				Formatter: "{b}: {c}",
			}),
			charts.WithPieChartOpts(opts.PieChart{
				Radius:   []string{"30%", "75%"},
				RoseType: "radius",
			}),
		)
	pie.Render(w)
}
