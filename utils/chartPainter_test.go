package utils

import (
	"context"
	"github.com/chromedp/chromedp"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/golang/glog"
	"io/ioutil"
	"log"
	"net/http"
	"testing"
)

//// generate random data for bar chart
//func generateBarItems() []opts.BarData {
//	items := make([]opts.BarData, 0)
//	for i := 0; i < 7; i++ {
//		items = append(items, opts.BarData{Value: rand.Intn(300)})
//	}
//	return items
//}
//
func httpserver(w http.ResponseWriter, _ *http.Request) {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	var (
		theX = []string{"X1", "X2", "X3", "X4", "X5"}
		theY = []float64{1.0, 1.3, 1.5, 1.1, 1.7}
	)

	// Put data into instance
	bar.SetXAxis(theX).
		AddSeries("Bar Data", ToBarData("Value", theY)).SetSeriesOptions(
		charts.WithMarkLineNameTypeItemOpts(
			opts.MarkLineNameTypeItem{Name: "Maximum", Type: "max"},
			//opts.MarkLineNameTypeItem{Name: "Avg", Type: "average"},
		),
	)

	line := charts.NewLine()
	line.SetGlobalOptions(
		charts.WithTitleOpts(opts.Title{Title: "basic line example", Subtitle: "This is the subtitle."}),
	)

	line.SetXAxis(theX).
		AddSeries("Line Data", ToLineData("Value", theY))

	bar.Overlap(line)
	//AddSeries("Category A", generateBarItems()).
	//AddSeries("Category B", generateBarItems())
	// Where the magic happens
	bar.Render(w)
}

func Test_ChartPainter(t *testing.T) {
	http.HandleFunc("/", httpserver)
	http.ListenAndServe(":8081", nil)

	//EnableGlogForTesting()
	//go func() {
	//	http.HandleFunc("/", httpserver)
	//	http.ListenAndServe(":8081", nil)
	//}()
	//TheScreenCapture.GenerateImage("newImage.png")
}

func Test_ChartPainter2(t *testing.T) {
	EnableGlogForTesting()
	//var (
	// body []byte
	//)
	glog.V(4).Info("START CAPTURE")
	//chromedp.Navigate("http://localhost:8081")
	////chromedp.Screenshot("EAXbIPnzxFhB", &body, chromedp.NodeVisible, chromedp.ByID)
	//chromedp.CaptureScreenshot(&body)
	//if err := ioutil.WriteFile("c:/FD/NewImage.png", body, 0644); err != nil {
	//	log.Fatal(err)
	//}
	// create context
	ctx, cancel := chromedp.NewContext(
		context.Background(),
		//chromedp.WithDebugf(log.Printf),
	)
	defer cancel()

	// capture screenshot of an element
	var buf []byte
	//if err := chromedp.Run(ctx, elementScreenshot(`https://pkg.go.dev/`,
	//
	//`img.Homepage-logo`, &buf)); err != nil {
	//	log.Fatal(err)
	//}
	//if err := ioutil.WriteFile("elementScreenshot.png", buf, 0o644); err != nil {
	//	log.Fatal(err)
	//}

	// capture entire browser viewport, returning png with quality=90
	if err := chromedp.Run(ctx, fullScreenshot(`file:///Users/carrick/go/src/github.com/skeyic/ark-robot/data/report/2021-04-23/top_10_stocks_2021-04-23ARKF.html`, 90, &buf)); err != nil {
		log.Fatal(err)
	}
	if err := ioutil.WriteFile("fullScreenshotChart.png", buf, 0x644); err != nil {
		log.Fatal(err)
	}
	log.Printf("wrote fullScreenshotChart.png")
}
