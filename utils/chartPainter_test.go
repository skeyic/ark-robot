package utils

import (
	"context"
	"github.com/chromedp/cdproto/emulation"
	"github.com/chromedp/cdproto/page"
	"github.com/chromedp/chromedp"
	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	"github.com/golang/glog"
	"io/ioutil"
	"log"
	"math"
	"math/rand"
	"net/http"
	"testing"
)

// generate random data for bar chart
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func httpserver(w http.ResponseWriter, _ *http.Request) {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	bar.Render(w)
}

func Test_ChartPainter(t *testing.T) {
	EnableGlogForTesting()
	//go func() {
	http.HandleFunc("/", httpserver)
	http.ListenAndServe(":8081", nil)
	//}()
	//glog.V(4).Info("START CAPTURE")
	//time.Sleep(3 * time.Second)
	//TheScreenCapture.GenerateImage("newImage.png")
}

func Test_ChartPainter2(t *testing.T) {
	EnableGlogForTesting()
	//var (
	// body []byte
	//)
	glog.V(4).Info("START CAPTURE")
	//chromedp.Navigate("http://localhost:8081")
	////chromedp.Screenshot("EAXbIPnzxFhB", &body, chromedp.NodeVisible, chromedp.ByID)
	//chromedp.CaptureScreenshot(&body)
	//if err := ioutil.WriteFile("c:/FD/NewImage.png", body, 0644); err != nil {
	//	log.Fatal(err)
	//}
	// create context
	ctx, cancel := chromedp.NewContext(
		context.Background(),
		// chromedp.WithDebugf(log.Printf),
	)
	defer cancel()

	// capture screenshot of an element
	var buf []byte
	if err := chromedp.Run(ctx, elementScreenshot(`https://pkg.go.dev/`, `img.Homepage-logo`, &buf)); err != nil {
		log.Fatal(err)
	}
	if err := ioutil.WriteFile("elementScreenshot.png", buf, 0o644); err != nil {
		log.Fatal(err)
	}

	//// capture entire browser viewport, returning png with quality=90
	//if err := chromedp.Run(ctx, fullScreenshot(`https://brank.as/`, 90, &buf)); err != nil {
	//	log.Fatal(err)
	//}
	//if err := ioutil.WriteFile("fullScreenshot.png", buf, 0o644); err != nil {
	//	log.Fatal(err)
	//}

	log.Printf("wrote elementScreenshot.png and fullScreenshot.png")

}

func fullScreenshot(urlstr string, quality int64, res *[]byte) chromedp.Tasks {
	return chromedp.Tasks{
		chromedp.Navigate(urlstr),
		chromedp.ActionFunc(func(ctx context.Context) error {
			// get layout metrics
			_, _, cssContentSize, err := page.GetLayoutMetrics().Do(ctx)
			if err != nil {
				return err
			}

			width, height := int64(math.Ceil(cssContentSize.Width)), int64(math.Ceil(cssContentSize.Height))

			// force viewport emulation
			err = emulation.SetDeviceMetricsOverride(width, height, 1, false).
				WithScreenOrientation(&emulation.ScreenOrientation{
					Type:  emulation.OrientationTypePortraitPrimary,
					Angle: 0,
				}).
				Do(ctx)
			if err != nil {
				return err
			}

			// capture screenshot
			*res, err = page.CaptureScreenshot().
				WithQuality(quality).
				WithClip(&page.Viewport{
					X:      cssContentSize.X,
					Y:      cssContentSize.Y,
					Width:  cssContentSize.Width,
					Height: cssContentSize.Height,
					Scale:  1,
				}).Do(ctx)
			if err != nil {
				return err
			}
			return nil
		}),
	}
}
