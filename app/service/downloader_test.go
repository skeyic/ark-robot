package service

import (
	"encoding/csv"
	"flag"
	"fmt"
	"github.com/golang/glog"
	"github.com/skeyic/ark-robot/utils"
	"github.com/tebeka/selenium"
	"io/ioutil"
	"net/http"
	"os"
	"testing"
	"time"
)

func TestDownloadCSV(t *testing.T) {
	flag.Set("logtostderr", "true")
	flag.Set("v", "10")
	flag.Parse()

	err := TheDownloader.DownloadAllARKCSVsV2()
	if err != nil {
		glog.Errorf("failed to download csv, err: %v", err)
		return
	}

	//<-make(chan struct{}, 1)
}

func TestDownloadTime(t *testing.T) {
	fmt.Printf("NOW: %d", time.Now().UTC().Day())
}

func Test_DownloadWithMoreInfo(t *testing.T) {
	utils.EnableGlogForTesting()

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl "https://ark-funds.com/wp-content/fundsiteliterature/csv/ARK_NEXT_GENERATION_INTERNET_ETF_ARKW_HOLDINGS.csv" ^
	//   -H "authority: ark-funds.com" ^
	//   -H "upgrade-insecure-requests: 1" ^
	//   -H "user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36" ^
	//   -H "accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9" ^
	//   -H "sec-fetch-site: same-origin" ^
	//   -H "sec-fetch-mode: navigate" ^
	//   -H "sec-fetch-user: ?1" ^
	//   -H "sec-fetch-dest: document" ^
	//   -H "referer: https://ark-funds.com/investor-resources" ^
	//   -H "accept-language: zh-CN,zh;q=0.9,en;q=0.8" ^
	//   -H "cookie: _ga=GA1.2.1970799815.1612344474; __cfduid=dd1ea544054408d2ddd9a60fe5981e7191615726396; PHPSESSID=ihegc2qttn6rg1oifupl91kmkl; _gid=GA1.2.1642418799.1615726420; _gat=1" ^
	//   --compressed

	//req, err := http.NewRequest("GET", "https://ark-funds.com/wp-content/fundsiteliterature/csv/ARK_NEXT_GENERATION_INTERNET_ETF_ARKW_HOLDINGS.csv", nil)
	req, err := http.NewRequest("GET", "https://ark-funds.com/wp-content/uploads/funds-etf-pdf/ARKX-holdings-1633450524-2722018547922067765.pdf", nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authority", "ark-funds.com")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
	req.Header.Set("Sec-Fetch-Site", "same-origin")
	req.Header.Set("Sec-Fetch-Mode", "navigate")
	req.Header.Set("Sec-Fetch-User", "?1")
	req.Header.Set("Sec-Fetch-Dest", "document")
	req.Header.Set("Referer", "https://ark-funds.com/investor-resources")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9,en;q=0.8")
	req.Header.Set("Cookie", "_ga=GA1.2.1970799815.1612344474; __cfduid=dd1ea544054408d2ddd9a60fe5981e7191615726396; PHPSESSID=ihegc2qttn6rg1oifupl91kmkl; _gid=GA1.2.1642418799.1615726420; _gat=1")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	b, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		glog.Errorf("ERR: %v", err)
	}
	glog.V(4).Infof("BODY: %s", b)
}

func TestD2(t *testing.T) {
	utils.EnableGlogForTesting()

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl "https://ark-funds.com/wp-admin/admin-ajax.php" ^
	//   -H "authority: ark-funds.com" ^
	//   -H "sec-ch-ua: ^\^"Chromium^\^";v=^\^"94^\^", ^\^"Google Chrome^\^";v=^\^"94^\^", ^\^";Not A Brand^\^";v=^\^"99^\^"" ^
	//   -H "accept: */*" ^
	//   -H "content-type: application/x-www-form-urlencoded; charset=UTF-8" ^
	//   -H "x-requested-with: XMLHttpRequest" ^
	//   -H "sec-ch-ua-mobile: ?0" ^
	//   -H "user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36" ^
	//   -H "sec-ch-ua-platform: ^\^"Windows^\^"" ^
	//   -H "origin: https://ark-funds.com" ^
	//   -H "sec-fetch-site: same-origin" ^
	//   -H "sec-fetch-mode: cors" ^
	//   -H "sec-fetch-dest: empty" ^
	//   -H "referer: https://ark-funds.com/download-fund-materials/" ^
	//   -H "accept-language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7,ja;q=0.6" ^
	//   -H "cookie: _ga=GA1.2.1970799815.1612344474; hubspotutk=f5fcbd4f5c6e2f322bfe59b1d792d014; __hs_opt_out=no; _gcl_au=1.1.1040350733.1629813020; messagesUtk=076417abd86a4de9a064395915f17525; __hstc=6077420.f5fcbd4f5c6e2f322bfe59b1d792d014.1615726439966.1629861285405.1633449517173.11; __hssrc=1; _gid=GA1.2.541727226.1633449518; userInfo=^{^\^"userType^\^":^\^"Individual Investor^\^"^}; _gat_UA-54486011-2=1; __hssc=6077420.5.1633449517173" ^
	//   --data-raw "action=generate_fund_holdings_csv&pid=1305" ^
	//   --compressed
	//

	req, err := http.NewRequest("GET", "https://ark-funds.com/wp-admin/admin-ajax.php", nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authority", "ark-funds.com")
	req.Header.Set("Sec-Ch-Ua", "^^Chromium^^;v=^^94^^, ^^Google")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}

	glog.V(4).Infof("RESP: %+v", resp)
	defer resp.Body.Close()

	b, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		glog.Errorf("ERR: %v", err)
	}
	glog.V(4).Infof("BODY: %s", b)
}

func Test_SeleniumDownload(t *testing.T) {
	utils.EnableGlogForTesting()

	var (
		gridURL     = "http://192.168.31.32:4444/wd/hub"
		browserName = "chrome"
		URL         = "https://ark-funds.com/download-fund-materials/"
		driver      selenium.WebDriver
		fileNameMap = map[string]string{
			"ARK Innovation ETF":                     "ARKK",
			"ARK Genomic Revolution ETF":             "ARKG",
			"ARK Next Generation Internet ETF":       "ARKW",
			"ARK Autonomous Tech. & Robotics ETF":    "ARKQ",
			"ARK Fintech Innovation ETF":             "ARKF",
			"ARK Space Exploration & Innovation ETF": "ARKX",
		}
	)

	caps := selenium.Capabilities{"browserName": browserName}
	webDriver, err := selenium.NewRemote(caps, gridURL)
	if nil != err {
		panic(err)
	}
	driver = webDriver

	// teardown
	defer driver.Quit()

	err = driver.Get(URL)
	if nil != err {
		glog.Errorf("search page open error, err: %s", err)
	}

	//err = driver.ResizeWindow("", 1660, 1379)
	err = driver.ResizeWindow("", 3200, 2600)
	if err != nil {
		glog.Errorf("Failed to resize window, err: %+v", err)
		return
	}

	title, err := driver.Title()
	if err != nil {
		glog.Errorf("Failed to get title, err: %+v", err)
		return
	}
	glog.V(4).Infof("TITLE: %s", title)

	navigate, err := driver.FindElement(selenium.ByLinkText, "Fund Holdings CSV")
	if err != nil {
		glog.Errorf("Failed to find element Fund Holdings CSV, err: %+v", err)
		return
	}

	err = navigate.Click()
	if err != nil {
		glog.Errorf("Failed to click element Fund Holdings CSV, err: %+v", err)
		return
	}

	for fileName, _ := range fileNameMap {
		e, err := driver.FindElement(selenium.ByXPATH, "//div[contains(text(),'"+fileName+"')]/../../../div[2]//button")
		if err != nil {
			glog.Errorf("Failed to find element, err: %+v", err)
			return
		}

		err = e.Click()
		if err != nil {
			glog.Errorf("Failed to click element, err: %+v", err)
			return
		}

		time.Sleep(5 * time.Second)
		glog.V(4).Infof("Downloaded %s", fileName)
	}
}

func TestReadNewCSV(t *testing.T) {
	utils.EnableGlogForTesting()

	var (
		path = "\\\\cocoa\\ubuntu\\spider\\data\\ARK_INNOVATION_ETF_ARKK_HOLDINGS.csv"
	)
	f, err := os.Open(path)
	if err != nil {
		glog.Errorf("failed to open csv file: %s, error: %v", path, err)
		return
	}
	defer f.Close()

	csvReader := csv.NewReader(f)

	for {
		record, err := csvReader.Read()
		if err != nil {
			glog.Errorf("failed to read csv file: %s, error: %v", path, err)
			return
		}
		glog.V(4).Infof("RECORD: %s", record)
	}
}

func TestGetLatestCSV(t *testing.T) {
	utils.EnableGlogForTesting()

	var (
		path   = "\\\\cocoa\\ubuntu\\spider\\data\\"
		prefix = "ARK_INNOVATION_ETF_ARKK_HOLDINGS"
		suffix = ".csv"
	)

	fn, err := GetLatestFileName(path, prefix, suffix)
	glog.V(4).Infof("FN: %s, ERR: %v", fn, err)
}
